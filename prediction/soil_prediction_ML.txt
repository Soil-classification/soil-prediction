SOIL_CROP_FERTILISER PREDICTION

#Each line shows each row Jupyter notebook/google colab. Pls run each row separately...
--------------------------------------------------------------------------------------------------------------------------------
# Import all required packages

import io
import pickle
import numpy as np 
import pandas as pd
from sklearn.metrics import recall_score,confusion_matrix,accuracy_score 
from sklearn.model_selection import train_test_split 
from sklearn.metrics import roc_curve
from sklearn.metrics import roc_auc_score
from matplotlib import pyplot as plt
---------------------------------------------------------------------------------------------------------------------------------
# Read the datasets

df=pd.read_csv(r'C:\Users\Guest\Desktop\Project\Book3_Updated.csv')
df
---------------------------------------------------------------------------------------------------------------------------------

df2 = pd.read_csv(r'C:\Users\Guest\Desktop\Project\Book3_Updated_Soil.csv')
df2
---------------------------------------------------------------------------------------------------------------------------------

# Label Encoding and create a couple of dictionaries for future use

# Fertiliser And Crop


from io import StringIO
col = ['temperature', 'humidity', 'ph', 'rainfall', 'N', 'P', 'K', 'Fertiliser ','Soil','Crop']
df = df[col]
df = df[pd.notnull(df['temperature'])]
df.columns = ['temperature', 'humidity', 'ph', 'rainfall', 'N', 'P', 'K', 'Fertiliser ','Soil','Crop']
df['encode_id'] = df['Fertiliser '].factorize()[0]
df['crop_id'] = df['Crop'].factorize()[0]
category_id_df = df[['Fertiliser ', 'encode_id']].drop_duplicates().sort_values('encode_id')
crop_id_df = df[['Crop', 'crop_id']].drop_duplicates().sort_values('crop_id')
category_to_id = dict(category_id_df.values)
id_to_category = dict(category_id_df[['encode_id', 'Fertiliser ']].values)
crop_to_id = dict(crop_id_df.values)
id_to_crop = dict(crop_id_df[['crop_id', 'Crop']].values)
df.tail()
---------------------------------------------------------------------------------------------------------------------------------

#Soil

X1=df2.iloc[:,:-3]
X1
---------------------------------------------------------------------------------------------------------------------------------

y1=df2[['Soil']]
y1
---------------------------------------------------------------------------------------------------------------------------------
#UPSAMPLING OF SOIL DATA

from imblearn.over_sampling import SMOTE
sm=SMOTE(k_neighbors=1)
X_res2,Y_res2=sm.fit_sample(X1,y1)
---------------------------------------------------------------------------------------------------------------------------------

soil_df=pd.DataFrame(X_res2)
soil_df['Soil']=Y_res2
soil_df
---------------------------------------------------------------------------------------------------------------------------------

soil_df.to_csv(r'C:\Users\Guest\Desktop\Project\upsam_soil.csv')
---------------------------------------------------------------------------------------------------------------------------------

# The upsampled data cleaned and write it into new csv. Read that prepocessed data.

df2=pd.read_csv(r'C:\Users\Guest\Desktop\Project\Book1.csv')
df2
---------------------------------------------------------------------------------------------------------------------------------

# Label Encoding and create a couple of dictionaries for future use

from io import StringIO
col1 = ['temperature', 'humidity', 'ph', 'rainfall', 'N', 'P', 'K', 'Soil']
dff=df2[col1]
dff = dff[pd.notnull(dff['temperature'])]
dff.columns = ['temperature', 'humidity', 'ph', 'rainfall', 'N', 'P', 'K', 'Soil']
dff['soil_id'] = dff['Soil'].factorize()[0]
soil_id_df = dff[['Soil', 'soil_id']].drop_duplicates().sort_values('soil_id')
soil_to_id = dict(soil_id_df.values)
id_to_soil = dict(soil_id_df[['soil_id', 'Soil']].values)
dff.tail(40)
---------------------------------------------------------------------------------------------------------------------------------

# Dictionaries Values

category_id_df
---------------------------------------------------------------------------------------------------------------------------------

crop_id_df
---------------------------------------------------------------------------------------------------------------------------------

soil_id_df
---------------------------------------------------------------------------------------------------------------------------------

id_to_category
---------------------------------------------------------------------------------------------------------------------------------

id_to_crop
---------------------------------------------------------------------------------------------------------------------------------

id_to_soil
---------------------------------------------------------------------------------------------------------------------------------

# Write the dictionary values to csvs

dataframe=pd.DataFrame(category_id_df)
dataframe.to_csv(r'C:\Users\Guest\Desktop\Project\encoded_dict.csv')
---------------------------------------------------------------------------------------------------------------------------------

dataframe1=pd.DataFrame(soil_id_df)
dataframe1.to_csv(r'C:\Users\Guest\Desktop\Project\encoded_dict_soil.csv')
---------------------------------------------------------------------------------------------------------------------------------

dataframe2=pd.DataFrame(crop_id_df)
dataframe2.to_csv(r'C:\Users\Guest\Desktop\Project\encoded_dict_crop.csv')
---------------------------------------------------------------------------------------------------------------------------------

# Plots
# Fertliser

fig = plt.figure(figsize=(8,6))
df.groupby('Fertiliser ').temperature.count().plot.bar(ylim=0)
plt.show()
---------------------------------------------------------------------------------------------------------------------------------

# Soil Before Upsampling

fig = plt.figure(figsize=(8,6))
df.groupby('Soil').temperature.count().plot.bar(ylim=0)
plt.show()
---------------------------------------------------------------------------------------------------------------------------------

# Soil After Upsampling

fig = plt.figure(figsize=(8,6))
df2.groupby('Soil').temperature.count().plot.bar(ylim=0)
plt.show()

# Crop

fig = plt.figure(figsize=(8,6))
df.groupby('Crop').temperature.count().plot.bar(ylim=0)
plt.show()
---------------------------------------------------------------------------------------------------------------------------------

# Drop unwanted columns

df=df.drop(['Fertiliser ','Soil','Crop'],axis=1)
df
---------------------------------------------------------------------------------------------------------------------------------

dff=dff.drop(['Soil'],axis=1)
dff
---------------------------------------------------------------------------------------------------------------------------------

# Features (X) and Targets (Y)

X=df.iloc[:,:-2]
X
---------------------------------------------------------------------------------------------------------------------------------

y1=df[["encode_id"]]
y1
---------------------------------------------------------------------------------------------------------------------------------

y3=df[["crop_id"]]
y3

X1=dff.iloc[:,:-1]
X1
---------------------------------------------------------------------------------------------------------------------------------

y2=dff[["soil_id"]]
y2
---------------------------------------------------------------------------------------------------------------------------------

# Upsampling of Fertliser
# No need of upsampling crops beacuse they are balanced

from imblearn.over_sampling import SMOTE
sm=SMOTE(k_neighbors=1)

X_res1,Y_res1=sm.fit_sample(X,y1)
---------------------------------------------------------------------------------------------------------------------------------

print(X_res1.shape)
print(Y_res1.shape)
print(X_res2.shape)
print(Y_res2.shape)
---------------------------------------------------------------------------------------------------------------------------------

# Write all upsampled data to csv

X_res1.to_csv(r'C:\Users\Guest\Desktop\Project\upsam_X_fertilser.csv')
Y_res1.to_csv(r'C:\Users\Guest\Desktop\Project\upsam_Y_fertilser.csv')
---------------------------------------------------------------------------------------------------------------------------------

# Read the upsampled fertiliser csv file

df_fertiliser=pd.read_csv(r'C:\Users\Guest\Desktop\Project\upsam_X_fertilser.csv')
df_fertiliser = df_fertiliser.drop(['Unnamed: 0'],axis=1)
df_fertiliser
---------------------------------------------------------------------------------------------------------------------------------

# Split the data as Train set (90%) and Test Set (10%)

from sklearn.model_selection import train_test_split
X_train1, X_test1, y_train1, y_test1 = train_test_split(X, y1, test_size=0.1, random_state=0)
X_train2, X_test2, y_train2, y_test2 = train_test_split(X1, y2, test_size=0.1, random_state=0)
X_train3, X_test3, y_train3, y_test3 = train_test_split(X, y3, test_size=0.1, random_state=0)
---------------------------------------------------------------------------------------------------------------------------------

# 1.Models for Fertiliser Prediction

from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.svm import LinearSVC

from sklearn.naive_bayes import MultinomialNB
from sklearn.model_selection import cross_val_score
models = [
    RandomForestClassifier(n_estimators=200, max_depth=3, random_state=0),
    LinearSVC(),
    MultinomialNB(),
    LogisticRegression(random_state=0),
]
CV = 5
cv_df = pd.DataFrame(index=range(CV * len(models)))
entries = []
for model in models:
    model_name = model.__class__.__name__
    accuracies = cross_val_score(model, X_train1, y_train1, scoring='accuracy', cv=CV)
    for fold_idx, accuracy in enumerate(accuracies):
        entries.append((model_name, fold_idx, accuracy))
cv_df = pd.DataFrame(entries, columns=['model_name', 'fold_idx', 'accuracy'])


import seaborn as sns
sns.boxplot(x='model_name', y='accuracy', data=cv_df)
sns.stripplot(x='model_name', y='accuracy', data=cv_df, 
              size=8, jitter=True, edgecolor="gray", linewidth=2)
plt.show()
---------------------------------------------------------------------------------------------------------------------------------

cv_df.groupby('model_name').accuracy.mean()
---------------------------------------------------------------------------------------------------------------------------------

# The Best Model for Fertiliser Prediction is Random Forest. Accuracy 96.11%
---------------------------------------------------------------------------------------------------------------------------------

# 2.Models For Soil Prediction

from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.svm import LinearSVC
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis as LDA
from sklearn.svm import SVC
from sklearn.ensemble import GradientBoostingClassifier
from sklearn.naive_bayes import MultinomialNB

from sklearn.model_selection import cross_val_score
models = [
    RandomForestClassifier(n_estimators=200, max_depth=3, random_state=0),
    LinearSVC(),
    MultinomialNB(),
    LogisticRegression(random_state=0),
    GradientBoostingClassifier(n_estimators=300,random_state=1,learning_rate=0.5),
    SVC(kernel='linear'),
    LDA(n_components=1),
]
CV = 5
cv_df = pd.DataFrame(index=range(CV * len(models)))
entries = []
for model in models:
    model_name = model.__class__.__name__
    accuracies = cross_val_score(model, X_train2, y_train2, scoring='accuracy', cv=CV)
    for fold_idx, accuracy in enumerate(accuracies):
        entries.append((model_name, fold_idx, accuracy))
cv_df = pd.DataFrame(entries, columns=['model_name', 'fold_idx', 'accuracy'])


import seaborn as sns
sns.boxplot(x='model_name', y='accuracy', data=cv_df)
sns.stripplot(x='model_name', y='accuracy', data=cv_df, 
              size=8, jitter=True, edgecolor="gray", linewidth=2)
plt.show()
---------------------------------------------------------------------------------------------------------------------------------

cv_df.groupby('model_name').accuracy.mean()
---------------------------------------------------------------------------------------------------------------------------------

# The best Model for Soil Prediction is GBM. Accuracy 57.59%
---------------------------------------------------------------------------------------------------------------------------------

# 3.Models For Crop Prediction

from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.svm import LinearSVC
from sklearn.model_selection import cross_val_score

models = [
    RandomForestClassifier(n_estimators=200, max_depth=3, random_state=0),
    LinearSVC(),
    MultinomialNB(),
    LogisticRegression(random_state=0),
]
CV = 5
cv_df = pd.DataFrame(index=range(CV * len(models)))
entries = []
for model in models:
    model_name = model.__class__.__name__
    accuracies = cross_val_score(model, X_train3, y_train3, scoring='accuracy', cv=CV)
    for fold_idx, accuracy in enumerate(accuracies):
        entries.append((model_name, fold_idx, accuracy))
cv_df = pd.DataFrame(entries, columns=['model_name', 'fold_idx', 'accuracy'])


import seaborn as sns
sns.boxplot(x='model_name', y='accuracy', data=cv_df)
sns.stripplot(x='model_name', y='accuracy', data=cv_df, 
              size=8, jitter=True, edgecolor="gray", linewidth=2)
plt.show()
---------------------------------------------------------------------------------------------------------------------------------

cv_df.groupby('model_name').accuracy.mean()
---------------------------------------------------------------------------------------------------------------------------------

# The Best Model For Crop Prediction is Random Forest. Accuracy 92.77%
---------------------------------------------------------------------------------------------------------------------------------

# Classifiers
---------------------------------------------------------------------------------------------------------------------------------
# Random Forest For Fertiliser
# model RandomForest creation

from sklearn.ensemble import RandomForestClassifier
classifier = RandomForestClassifier(n_estimators=200, max_depth=3, random_state=0)
classifier.fit(X_train1,y_train1)
---------------------------------------------------------------------------------------------------------------------------------

# GBM classifier For Soil Prediction

gbm_classifier = GradientBoostingClassifier(n_estimators=300,random_state=1,learning_rate=0.5)
gbm_classifier.fit(X_train2,y_train2)
---------------------------------------------------------------------------------------------------------------------------------

# Random Forest For Crop Prediction
#model RandomForest creation

from sklearn.ensemble import RandomForestClassifier
classifier3 = RandomForestClassifier(n_estimators=200, max_depth=3, random_state=0)
classifier3.fit(X_train3,y_train3)
---------------------------------------------------------------------------------------------------------------------------------

# Accuracies

# Fertiliser
#RandomForest Accuracy
### Checking the model accuracy

from sklearn.model_selection import KFold,cross_val_score

print('RF Train_data : ',classifier.score(X_train1,y_train1))
print('RF Validation Data : ',classifier.score(X_test1,y_test1))
rf_pred1 = classifier.predict(X_test1)
print('Accuracy : ',accuracy_score(y_test1, rf_pred1))

# 10-Fold Cross validation

print('10-Fold Cross validation Accuracy : ',np.mean(cross_val_score(classifier, X_train1, y_train1, cv=10)))
---------------------------------------------------------------------------------------------------------------------------------

# Soil
#RandomForest Accuracy
### Checking the model accuracy

from sklearn.metrics import accuracy_score
import numpy as np
from sklearn.model_selection import KFold,cross_val_score

print('GBM Train_data : ',gbm_classifier.score(X_train2,y_train2))
print('GBM Validation Data : ',gbm_classifier.score(X_test2,y_test2))
gbm_pred = gbm_classifier.predict(X_test2)
print('Accuracy : ',accuracy_score(y_test2, gbm_pred))

# 10-Fold Cross validation

print('10-Fold Cross validation Accuracy : ',np.mean(cross_val_score(gbm_classifier, X_train2, y_train2, cv=10)))
---------------------------------------------------------------------------------------------------------------------------------

# Crop
#RandomForest Accuracy
### Checking the model accuracy

from sklearn.model_selection import KFold,cross_val_score
print('RF Train_data : ',classifier3.score(X_train3,y_train3))
print('RF Validation Data : ',classifier3.score(X_test3,y_test3))
rf_pred3 = classifier3.predict(X_test3)
print('Accuracy : ',accuracy_score(y_test3, rf_pred3))

# 10-Fold Cross validation

print('10-Fold Cross validation Accuracy : ',np.mean(cross_val_score(classifier3, X_train3, y_train3, cv=10)))
---------------------------------------------------------------------------------------------------------------------------------

# Performance Metrics For Fertiliser

from sklearn.metrics import confusion_matrix,classification_report
conf_mat = confusion_matrix(y_test1, rf_pred1)
fig, ax = plt.subplots(figsize=(10,10))
sns.heatmap(conf_mat, annot=True, fmt='d',
            xticklabels=category_id_df['Fertiliser '].values, yticklabels=category_id_df['Fertiliser '].values)
plt.ylabel('Actual')
plt.xlabel('Predicted')
plt.show()
---------------------------------------------------------------------------------------------------------------------------------

print('Classification Report : ')
print(classification_report(y_test1, rf_pred1))
print('Accuracy : ',accuracy_score(y_test1, rf_pred1))
---------------------------------------------------------------------------------------------------------------------------------

# Performance Metrics For Soil

from sklearn.metrics import confusion_matrix,classification_report
conf_mat = confusion_matrix(y_test2, gbm_pred)
fig, ax = plt.subplots(figsize=(10,10))
sns.heatmap(conf_mat, annot=True, fmt='d',
            xticklabels=soil_id_df['Soil'].values, yticklabels=soil_id_df['Soil'].values)
plt.ylabel('Actual')
plt.xlabel('Predicted')
plt.show()
---------------------------------------------------------------------------------------------------------------------------------

from sklearn.metrics import confusion_matrix,classification_report
print('Confusion Matrix : ')
print(confusion_matrix(y_test2, gbm_pred))
print('Classification Report : ')
print(classification_report(y_test2, gbm_pred))
print('Accuracy : ',accuracy_score(y_test2, gbm_pred))
---------------------------------------------------------------------------------------------------------------------------------

# Performance Metrics For Crop

from sklearn.metrics import confusion_matrix,classification_report
conf_mat = confusion_matrix(y_test3, rf_pred3)
fig, ax = plt.subplots(figsize=(10,10))
sns.heatmap(conf_mat, annot=True, fmt='d',
            xticklabels=crop_id_df['Crop'].values, yticklabels=crop_id_df['Crop'].values)
plt.ylabel('Actual')
plt.xlabel('Predicted')
plt.show()
---------------------------------------------------------------------------------------------------------------------------------

print('Classification Report : ')
print(classification_report(y_test3, rf_pred3))
print('Accuracy : ',accuracy_score(y_test3, rf_pred3))
---------------------------------------------------------------------------------------------------------------------------------

# Save The Models

import pickle
pickle.dump(classifier,open(r"C:\Users\Guest\Desktop\Project\RFClassifier_Fertilser",'wb'))
pickle.dump(gbm_classifier,open(r"C:\Users\Guest\Desktop\Project\GBMClassifier_Soil",'wb'))
pickle.dump(classifier3,open(r"C:\Users\Guest\Desktop\Project\RFClassifier_Crop",'wb'))
---------------------------------------------------------------------------------------------------------------------------------

# Load the model From the disc
#Fertiliser

loaded_model1 = pickle.load(open(r"C:\Users\Guest\Desktop\Project\RFClassifier_Fertilser",'rb'))
result1 = loaded_model1.score(X_test1, y_test1)
print(result1)
---------------------------------------------------------------------------------------------------------------------------------

# Soil

loaded_model2 = pickle.load(open(r"C:\Users\Guest\Desktop\Project\GBMClassifier_Soil",'rb'))
result2 = loaded_model2.score(X_test2, y_test2)
print(result2)
---------------------------------------------------------------------------------------------------------------------------------

# Crop

loaded_model3 = pickle.load(open(r"C:\Users\Guest\Desktop\Project\RFClassifier_Crop",'rb'))
result3 = loaded_model3.score(X_test3, y_test3)
print(result3)
---------------------------------------------------------------------------------------------------------------------------------

# Test the Model Using New Unseen Dataset
# Fertiliser

import pickle
import pandas as pd

# load the model from disk

loaded_model = pickle.load(open(r"C:\Users\Guest\Desktop\Project\RFClassifier_Fertilser",'rb'))
dat=pd.read_csv(r"C:\Users\Guest\Desktop\Project\test_fert_crop_soil.csv")
dat1=dat[['Fertiliser ']]
dat1
---------------------------------------------------------------------------------------------------------------------------------

dat=dat.drop(['Fertiliser ','Soil','Crop'],axis=1)
dat
---------------------------------------------------------------------------------------------------------------------------------

y_pred = loaded_model.predict(dat)
y_pred
---------------------------------------------------------------------------------------------------------------------------------

new_dat=pd.read_csv(r"C:\Users\Guest\Desktop\Project\encoded_dict.csv")
new_dat=new_dat.drop(['Unnamed: 0'],axis=1)
new_dat

cat_to_id = dict(new_dat.values)
cat_to_id
---------------------------------------------------------------------------------------------------------------------------------

def get_key(val): 
    for key, value in cat_to_id.items(): 
         if val == value: 
            return key
---------------------------------------------------------------------------------------------------------------------------------

mi=[]
for i in y_pred:
    k=get_key(i)
    print(k)
    mi.append(k)
---------------------------------------------------------------------------------------------------------------------------------

li=dat1['Fertiliser '].values.tolist()
li
---------------------------------------------------------------------------------------------------------------------------------

list1=li
---------------------------------------------------------------------------------------------------------------------------------

# Accuracy of Fertilser New Set

print("Accuracy on new set data ",accuracy_score(li, mi))

# Scatter Plot Of Fertiliser

Y=mi
e_dataframe=pd.DataFrame(Y, columns=['Fertiliser']) 
e_dataframe['Index']=e_dataframe.index
ind = e_dataframe["Index"]
elem= e_dataframe["Fertiliser"]
x1=[]
y1=[]
x1=list(ind)
y1=list(elem)

from matplotlib import pyplot as plt
#colors = np.where(y1=1, 'r', 'k')
plt.scatter(x1,y1)
plt.xlabel('Index->')
plt.ylabel('Fertiliser->')
plt.title('Data')
for x,y in zip(x1,y1):

    label = y

    # this method is called for each point
    plt.annotate(label,                           # this is the text
                 (x,y),                           # this is the point to label
                 textcoords="offset points",      # how to position the text
                 xytext=(0,10),                   # distance from text to points (x,y)
                 ha='center')                     # horizontal alignment can be left, right or center

plt.show()
---------------------------------------------------------------------------------------------------------------------------------

# Soil

import pickle
import pandas as pd

# load the model from disk

loaded_model = pickle.load(open(r"C:\Users\Guest\Desktop\Project\GBMClassifier_Soil",'rb'))
dat=pd.read_csv(r"C:\Users\Guest\Desktop\Project\test_fert_crop_soil.csv")
dat2=dat[['Soil']]
dat2
---------------------------------------------------------------------------------------------------------------------------------

dat=dat.drop(['Fertiliser ','Soil','Crop'],axis=1)
dat
---------------------------------------------------------------------------------------------------------------------------------

y_pred = loaded_model.predict(dat)
y_pred
---------------------------------------------------------------------------------------------------------------------------------

new_dat=pd.read_csv(r"C:\Users\Guest\Desktop\Project\encoded_dict_soil.csv")
new_dat=new_dat.drop(['Unnamed: 0'],axis=1)
new_dat
---------------------------------------------------------------------------------------------------------------------------------

cat_to_id = dict(new_dat.values)
cat_to_id
---------------------------------------------------------------------------------------------------------------------------------

mi=[]
for i in y_pred:
    k=get_key(i)
    print(k)
    mi.append(k)
---------------------------------------------------------------------------------------------------------------------------------

li=dat2['Soil'].values.tolist()
li
---------------------------------------------------------------------------------------------------------------------------------

list2=li
---------------------------------------------------------------------------------------------------------------------------------

# Accuracy of Soil New Set

print("Accuracy on new set data ",accuracy_score(li, mi))
---------------------------------------------------------------------------------------------------------------------------------

# Scatter Plot Of Soil

Y=mi
e_dataframe=pd.DataFrame(Y, columns=['Soil']) 

e_dataframe['Index']=e_dataframe.index

ind = e_dataframe["Index"]
elem= e_dataframe["Soil"]

x1=[]
y1=[]

x1=list(ind)
y1=list(elem)

from matplotlib import pyplot as plt
#colors = np.where(y1=1, 'r', 'k')
plt.scatter(x1,y1)
plt.xlabel('Index->')
plt.ylabel('Soil->')
plt.title('Data')


for x,y in zip(x1,y1):

    label = y

    # this method is called for each point
    plt.annotate(label,                       # this is the text
                 (x,y),                       # this is the point to label
                 textcoords="offset points",  # how to position the text
                 xytext=(0,10),               # distance from text to points (x,y)
                 ha='center')                 # horizontal alignment can be left, right or center


plt.show()
---------------------------------------------------------------------------------------------------------------------------------

# Crop

import pickle
import pandas as pd

# load the model from disk

loaded_model = pickle.load(open(r"C:\Users\Guest\Desktop\Project\RFClassifier_Crop",'rb'))
dat=pd.read_csv(r"C:\Users\Guest\Desktop\Project\test_fert_crop_soil.csv")
dat3=dat[['Crop']]
dat3
---------------------------------------------------------------------------------------------------------------------------------

dat=dat.drop(['Fertiliser ','Soil','Crop'],axis=1)
dat
---------------------------------------------------------------------------------------------------------------------------------

y_pred = loaded_model.predict(dat)
y_pred
---------------------------------------------------------------------------------------------------------------------------------

new_dat=pd.read_csv(r"C:\Users\Guest\Desktop\Project\encoded_dict_crop.csv")
new_dat=new_dat.drop(['Unnamed: 0'],axis=1)
new_dat
---------------------------------------------------------------------------------------------------------------------------------

cat_to_id = dict(new_dat.values)
cat_to_id
---------------------------------------------------------------------------------------------------------------------------------

mi=[]
for i in y_pred:
    k=get_key(i)
    print(k)
    mi.append(k)
---------------------------------------------------------------------------------------------------------------------------------

li=dat3['Crop'].values.tolist()
li
---------------------------------------------------------------------------------------------------------------------------------

list3=li
---------------------------------------------------------------------------------------------------------------------------------

# Accuracy of Crop New Set

print("Accuracy on new set data ",accuracy_score(li, mi))
---------------------------------------------------------------------------------------------------------------------------------

# Scatter Plot Of Crop

Y=mi
e_dataframe=pd.DataFrame(Y, columns=['Crop']) 
e_dataframe['Index']=e_dataframe.index

ind = e_dataframe["Index"]
elem= e_dataframe["Crop"]
x1=[]
y1=[]

x1=list(ind)
y1=list(elem)

from matplotlib import pyplot as plt
#colors = np.where(y1=1, 'r', 'k')
plt.scatter(x1,y1)
plt.xlabel('Index->')
plt.ylabel('Crop->')
plt.title('Data')


for x,y in zip(x1,y1):

    label = y

    # this method is called for each point
    plt.annotate(label,                      # this is the text
                 (x,y),                      # this is the point to label
                 textcoords="offset points", # how to position the text
                 xytext=(0,10),              # distance from text to points (x,y)
                 ha='center')                # horizontal alignment can be left, right or center


plt.show()
---------------------------------------------------------------------------------------------------------------------------------

# FINAL OUTPUT

print("The Given Dataset contain : ")
print("Fertiliser | Soil | Crop")
print("---------- | ---- | ----")
length=len(list1)
i=0
while length > i:
    print(list1[i] +" | "+ list2[i] +" | "+ list3[i])
    i = i + 1
---------------------------------------------------------------------------------------------------------------------------------


